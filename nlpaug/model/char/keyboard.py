import re

from nlpaug.model.char import Character


class Keyboard(Character):
    def __init__(self, special_char=True, numeric=True, upper_case=True, cache=True, lang="en"):
        super().__init__(cache)

        self.special_char = special_char
        self.numeric = numeric
        self.upper_case = upper_case
        self.lang = lang
        self.model = self.get_model(
            special_char=special_char, numeric=numeric, upper_case=upper_case, lang=lang)

    def predict(self, data):
        return self.model[data]

    # TODO: Read from file and extending to 2 keyboard distance
    @classmethod
    def get_model(cls, special_char=True, numeric=True, upper_case=True, lang="en"):
        if lang == "en":
            mapping = {
                '1': ['!', '2', '@', 'q', 'w'],
                '2': ['@', '1', '!', '3', '#', 'q', 'w', 'e'],
                '3': ['#', '2', '@', '4', '$', 'w', 'e'],
                '4': ['$', '3', '#', '5', '%', 'e', 'r'],
                '5': ['%', '4', '$', '6', '^', 'r', 't', 'y'],
                '6': ['^', '5', '%', '7', '&', 't', 'y', 'u'],
                '7': ['&', '6', '^', '8', '*', 'y', 'u', 'i'],
                '8': ['*', '7', '&', '9', '(', 'u', 'i', 'o'],
                '9': ['(', '8', '*', '0', ')', 'i', 'o', 'p'],

                'q': ['1', '!', '2', '@', 'w', 'a', 's'],
                'w': ['1', '!', '2', '@', '3', '#', 'q', 'e', 'a', 's', 'd'],
                'e': ['2', '@', '3', '#', '4', '$', 'w', 'r', 's', 'd', 'f'],
                'r': ['3', '#', '4', '$', '5', '%', 'e', 't', 'd', 'f', 'g'],
                't': ['4', '$', '5', '%', '6', '^', 'r', 'y', 'f', 'g', 'h'],
                'y': ['5', '%', '6', '^', '7', '&', 't', 'u', 'g', 'h', 'j'],
                'u': ['6', '^', '7', '&', '8', '*', ' t', 'i', 'h', 'j', 'k'],
                'i': ['7', '&', '8', '*', '9', '(', 'u', 'o', 'j', 'k', 'l'],
                'o': ['8', '*', '9', '(', '0', ')', 'i', 'p', 'k', 'l'],
                'p': ['9', '(', '0', ')', 'o', 'l'],

                'a': ['q', 'w', 'a', 's', 'z', 'x'],
                's': ['q', 'w', 'e', 'a', 'd', 'z', 'x', 'c'],
                'd': ['w', 'e', 'r', 's', 'f', 'x', 'c', 'v'],
                'f': ['e', 'r', 't', 'd', 'g', 'c', 'v', 'b'],
                'g': ['r', 't', 'y', 'f', 'h', 'v', 'b', 'n'],
                'h': ['t', 'y', 'u', 'g', 'j', 'b', 'n', 'm'],
                'j': ['y', 'u', 'i', 'h', 'k', 'n', 'm', ',', '<'],
                'k': ['u', 'i', 'o', 'j', 'l', 'm', ',', '<', '.', '>'],
                'l': ['i', 'o', 'p', 'k', ';', ':', ',', '<', '.', '>', '/', '?'],

                'z': ['a', 's', 'x'],
                'x': ['a', 's', 'd', 'z', 'c'],
                'c': ['s', 'd', 'f', 'x', 'v'],
                'v': ['d', 'f', 'g', 'c', 'b'],
                'b': ['f', 'g', 'h', 'v', 'n'],
                'n': ['g', 'h', 'j', 'b', 'm'],
                'm': ['h', 'j', 'k', 'n', ',', '<']
            }

        elif lang == "th":
            mapping = {
                'ๅ': ['/', 'ๆ', 'ไ'],
                '/': ['ๅ', '_', 'ๆ', 'ไ', 'ำ'],
                '_': ['/', 'ภ', 'ไ', 'ำ', 'พ'],
                'ภ': ['_', 'ถ', 'ำ', 'พ', 'ะ'],
                'ถ': ['ภ', 'ุ', 'พ', 'ะ', 'ั'],
                'ุ': ['ถ', 'ึ', 'ะ', 'ั', 'ี'],
                'ึ': ['ุ', 'ค', 'ั', 'ี', 'ร'],
                'ค': ['ึ', 'ต', 'ี', 'ร', 'น'],
                'ต': ['ค', 'จ', 'ร', 'น', 'ย'],
                'จ': ['ต', 'ข', 'น', 'ย', 'บ'],
                'ข': ['จ', 'ช', 'ย', 'บ', 'ล'],
                'ช': ['ข', 'บ', 'ล'],

                'ๆ': ['ๅ', '/', 'ไ', 'ฟ', 'ห'],
                'ไ': ['ๅ', '/', '_', 'ๆ', 'ำ', 'ฟ', 'ห', 'ก'],
                'ำ': ['/', '_', 'ภ', 'ไ', 'พ', 'ห', 'ก', 'ด'],
                'พ': ['_', 'ภ', 'ถ', 'ำ', 'ะ', 'ก', 'ด', 'เ'],
                'ะ': ['ภ', 'ถ', 'ุ', 'พ', 'ั', 'ด', 'เ', '้'],
                'ั': ['ถ', 'ุ', 'ึ', 'ะ', 'ี', 'เ', '้', '่'],
                'ี': ['ุ', 'ึ', 'ค', 'ั', 'ร', '้', '่', 'า'],
                'ร': ['ึ', 'ค', 'ต', 'ี', 'น', '่', 'า', 'ส'],
                'น': ['ค', 'ต', 'จ', 'ร', 'ย', 'า', 'ส', 'ว'],
                'ย': ['ต', 'จ', 'ข', 'น', 'บ', 'ส', 'ว', 'ง'],
                'บ': ['จ', 'ข', 'ช', 'ย', 'ล', 'ว', 'ง', 'ฃ'],
                'ล': ['ข', 'ช', 'บ', 'ง', 'ฃ'],

                'ฟ': ['ๆ', 'ไ', 'ห', 'ผ'],
                'ห': ['ๆ', 'ไ', 'ำ', 'ฟ', 'ก', 'ผ', 'ป'],
                'ก': ['ไ', 'ำ', 'พ', 'ห', 'ด', 'ผ', 'ป', 'แ'],
                'ด': ['ำ', 'พ', 'ะ', 'ก', 'เ', 'ป', 'แ', 'อ'],
                'เ': ['พ', 'ะ', 'ั', 'ด', '้', 'แ', 'อ', 'ิ'],
                '้': ['ะ', 'ั', 'ี', 'เ', '่', 'อ', 'ิ', 'ื'],
                '่': ['ั', 'ี', 'ร', '้', 'า', 'ิ', 'ื', 'ท'],
                'า': ['ี', 'ร', 'น', '่', 'ส', 'ื', 'ท', 'ม'],
                'ส': ['ร', 'น', 'ย', 'า', 'ว', 'ท', 'ม', 'ใ'],
                'ว': ['น', 'ย', 'บ', 'ส', 'ง', 'ม', 'ใ', 'ฝ'],
                'ง': ['ย', 'บ', 'ล', 'ว', 'ฃ', 'ใ', 'ฝ'],
                'ฃ': ['บ', 'ล', 'ง', 'ฝ'],

                'ผ': ['ฟ', 'ห', 'ก', 'ป'],
                'ป': ['ห', 'ก', 'ด', 'ผ', 'แ'],
                'แ': ['ก', 'ด', 'เ', 'ป', 'อ'],
                'อ': ['ด', 'เ', '้', 'แ', 'ิ'],
                'ิ': ['เ', '้', '่', 'อ', 'ื'],
                'ื': ['้', '่', 'า', 'ิ', 'ท'],
                'ท': ['่', 'า', 'ส', 'ื', 'ม'],
                'ม': ['า', 'ส', 'ว', 'ท', 'ใ'],
                'ใ': ['ส', 'ว', 'ง', 'ม', 'ฝ'],
                'ฝ': ['ว', 'ง', 'ฃ', 'ใ'],

                # Shift Enabled
                '+': ['๑', '๐', '"'],
                '๑': ['+', '๒', '๐', '"', 'ฎ'],
                '๒': ['๑', '๓', '"', 'ฎ', 'ฑ'],
                '๓': ['๒', '๔', 'ฎ', 'ฑ', 'ธ'],
                '๔': ['๓', 'ู', 'ฑ', 'ธ', 'ํ'],
                'ู': ['๔', '฿', 'ธ', 'ํ', '๊'],
                '฿': ['ู', '๕', 'ํ', '๊', 'ณ'],
                '๕': ['฿', '๖', '๊', 'ณ', 'ฯ'],
                '๖': ['๕', '๗', 'ณ', 'ฯ', 'ญ'],
                '๗': ['๖', '๘', 'ฯ', 'ญ', 'ฐ'],
                '๘': ['๗', '๙', 'ญ', 'ฐ', ','],
                '๙': ['๘', 'ฐ', ','],

                '๐': ['+', '๑', '"', 'ฤ', 'ฆ'],
                '"': ['+', '๑', '๒', '๐', 'ฎ', 'ฤ', 'ฆ', 'ฏ'],
                'ฎ': ['๑', '๒', '๓', '"', 'ฑ', 'ฆ', 'ฏ', 'โ'],
                'ฑ': ['๒', '๓', '๔', 'ฎ', 'ธ', 'ฏ', 'โ', 'ฌ'],
                'ธ': ['๓', '๔', 'ู', 'ฑ', 'ํ', 'โ', 'ฌ', '็'],
                'ํ': ['๔', 'ู', '฿', 'ธ', '๊', 'ฌ', '็', '๋'],
                '๊': ['ู', '฿', '๕', 'ํ', 'ณ', '็', '๋', 'ษ'],
                'ณ': ['฿', '๕', '๖', '๊', 'ฯ', '๋', 'ษ', 'ศ'],
                'ฯ': ['๕', '๖', '๗', 'ณ', 'ญ', 'ษ', 'ศ', 'ซ'],
                'ญ': ['๖', '๗', '๘', 'ฯ', 'ฐ', 'ศ', 'ซ', '.'],
                'ฐ': ['๗', '๘', '๙', 'ญ', ',', 'ซ', '.', 'ฅ'],
                ',': ['๘', '๙', 'ฐ', '.', 'ฅ'],

                'ฤ': ['๐', '"', 'ฆ', '('],
                'ฆ': ['๐', '"', 'ฎ', 'ฤ', 'ฏ', '(', ')'],
                'ฏ': ['"', 'ฎ', 'ฑ', 'ฆ', 'โ', '(', ')', 'ฉ'],
                'โ': ['ฎ', 'ฑ', 'ธ', 'ฏ', 'ฌ', ')', 'ฉ', 'ฮ'],
                'ฌ': ['ฑ', 'ธ', 'ํ', 'โ', '็', 'ฉ', 'ฮ', 'ฺ'],
                '็': ['ธ', 'ํ', '๊', 'ฌ', '๋', 'ฮ', 'ฺ', '์'],
                '๋': ['ํ', '๊', 'ณ', '็', 'ษ', 'ฺ', '์', '?'],
                'ษ': ['๊', 'ณ', 'ฯ', '๋', 'ศ', '์', '?', 'ฒ'],
                'ศ': ['ณ', 'ฯ', 'ญ', 'ษ', 'ซ', '?', 'ฒ', 'ฬ'],
                'ซ': ['ฯ', 'ญ', 'ฐ', 'ศ', '.', 'ฒ', 'ฬ', 'ฦ'],
                '.': ['ญ', 'ฐ', ',', 'ซ', 'ฅ', 'ฬ', 'ฦ'],
                'ฅ': ['ฐ', ',', '.', 'ฦ'],

                '(': ['ฤ', 'ฆ', 'ฏ', ')'],
                ')': ['ฆ', 'ฏ', 'โ', '(', 'ฉ'],
                'ฉ': ['ฏ', 'โ', 'ฌ', ')', 'ฮ'],
                'ฮ': ['โ', 'ฌ', '็', 'ฉ', 'ฺ'],
                'ฺ': ['ฌ', '็', '๋', 'ฮ', '์'],
                '์': ['็', '๋', 'ษ', 'ฺ', '?'],
                '?': ['๋', 'ษ', 'ศ', '์', 'ฒ'],
                'ฒ': ['ษ', 'ศ', 'ซ', '?', 'ฬ'],
                'ฬ': ['ศ', 'ซ', '.', 'ฒ', 'ฦ'],
                'ฦ': ['ซ', '.', 'ฅ', 'ฬ']
            }

        result = {}

        for key, values in mapping.items():
            # Skip records if key is numeric while include_numeric is false
            if not numeric and re.match("^[0-9]*$", key):
                continue

            result[key] = []
            result[key.upper()] = []

            for value in values:
                # Skip record if value is numeric while include_numeric is false
                if not numeric and re.match("^[0-9]*$", value):
                    continue

                # skip record if value is special character while include_spec is false
                if not special_char and not re.match("^[a-z0-9]*$", value):
                    continue

                result[key].append(value)

                if upper_case:
                    result[key].append(value.upper())
                    result[key.upper()].append(value)
                    result[key.upper()].append(value.upper())

        clean_result = {}
        for key, values in result.items():
            # clear empty mapping
            if len(values) == 0:
                continue

            # de-duplicate
            values = [v for v in values if v != key]
            values = sorted(list(set(values)))

            clean_result[key] = values

        return clean_result
